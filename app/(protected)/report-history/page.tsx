'use client'

import { useState } from 'react'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { format } from 'date-fns'
import { Badge } from '@/components/ui/badge'
import { FileText, Search, Download } from 'lucide-react'

// Define Report type with added generatedBy field
interface Report {
  id: string;
  type: string;
  generatedAt: string;
  status: 'completed' | 'generating' | 'failed';
  cost: number;
  pdfUrl?: string;
  generatedBy: string; // Added this field
}

// Static data for reports
const staticReports: Report[] = [
  {
    id: "REP-001",
    type: "Chakra Healing Report",
    generatedAt: "2025-02-15T10:30:00Z",
    status: "completed",
    cost: 499,
    pdfUrl: "https://example.com/reports/REP-001.pdf",
    generatedBy: "Rahul Sharma"
  },
  {
    id: "REP-002",
    type: "Fortune Report",
    generatedAt: "2025-02-18T14:20:00Z",
    status: "completed",
    cost: 999,
    pdfUrl: "https://example.com/reports/REP-002.pdf",
    generatedBy: "Priya Patel"
  },
  {
    id: "REP-003",
    type: "Lucky 13 Reports",
    generatedAt: "2025-02-25T09:15:00Z",
    status: "generating",
    cost: 1299,
    generatedBy: "Amit Kumar"
  },
  {
    id: "REP-004",
    type: "Vedic 4 Report",
    generatedAt: "2025-02-26T16:45:00Z",
    status: "completed",
    cost: 799,
    pdfUrl: "https://example.com/reports/REP-004.pdf",
    generatedBy: "Sneha Gupta"
  },
  {
    id: "REP-005",
    type: "Wealth Comprehensive Report",
    generatedAt: "2025-03-01T11:10:00Z",
    status: "failed",
    cost: 1499,
    generatedBy: "Vikram Singh"
  }
]

export default function ReportHistoryPage() {
  const [reports] = useState<Report[]>(staticReports)
  const [sorting, setSorting] = useState<SortingState>([])
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [searchQuery, setSearchQuery] = useState("")

  const handleExportToExcel = () => {
    // Convert data to CSV format
    const headers = ['Report ID', 'Type', 'Generated By', 'Generated At', 'Status', 'Cost', 'PDF URL']
    const csvData = reports.map(report => [
      report.id,
      report.type,
      report.generatedBy,
      format(new Date(report.generatedAt), "PPpp"),
      report.status,
      `₹${report.cost}`,
      report.pdfUrl || 'N/A'
    ])

    // Create CSV content
    const csvContent = [
      headers.join(','),
      ...csvData.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n')

    // Create and download file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `report_history_${format(new Date(), 'yyyy-MM-dd')}.csv`)
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  const columns: ColumnDef<Report>[] = [
    {
      accessorKey: "id",
      header: "Report ID",
      cell: ({ row }) => <div className="font-medium">{row.getValue("id")}</div>
    },
    {
      accessorKey: "type",
      header: "Type",
      cell: ({ row }) => (
        <div className="font-medium capitalize">{row.getValue("type")}</div>
      )
    },
    {
      accessorKey: "generatedBy",
      header: "Generated For",
      cell: ({ row }) => (
        <div className="font-medium">{row.getValue("generatedBy")}</div>
      )
    },
    {
      accessorKey: "generatedAt",
      header: "Generated At",
      cell: ({ row }) => (
        <div className="font-medium">
          {format(new Date(row.getValue("generatedAt")), "PPpp")}
        </div>
      )
    },
    {
      accessorKey: "status",
      header: "Status",
      cell: ({ row }) => {
        const status = row.getValue("status") as string
        return (
          <Badge
            variant={
              status === "completed"
                ? "success"
                : status === "generating"
                ? "warning"
                : "destructive"
            }
          >
            {status}
          </Badge>
        )
      }
    },
    {
      accessorKey: "cost",
      header: "Cost",
      cell: ({ row }) => (
        <div className="font-medium">₹{row.getValue("cost")}</div>
      )
    },
    {
      id: "actions",
      cell: ({ row }) => {
        const report = row.original
        return (
          <Button
            variant="ghost"
            size="icon"
            disabled={!report.pdfUrl}
            onClick={() => window.open(report.pdfUrl, '_blank')}
          >
            <FileText className="h-4 w-4" />
          </Button>
        )
      }
    }
  ]

  const table = useReactTable({
    data: reports,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      globalFilter: searchQuery
    },
    onGlobalFilterChange: setSearchQuery,
  })

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent">
          Report History
        </h1>
        <Button
          onClick={handleExportToExcel}
          className="bg-green-600 hover:bg-green-700 text-white"
        >
          <Download className="h-4 w-4 mr-2" />
          Export to CSV
        </Button>
      </div>

      <div className="bg-white rounded-lg shadow-sm">
        <div className="p-4">
          <div className="flex items-center gap-2 max-w-sm">
            <Search className="h-4 w-4 text-slate-500" />
            <Input
              placeholder="Search reports..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="h-8"
            />
          </div>
        </div>

        <div className="border-t">
          <Table>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => {
                    return (
                      <TableHead key={header.id}>
                        {header.isPlaceholder
                          ? null
                          : flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                      </TableHead>
                    )
                  })}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow
                    key={row.id}
                    data-state={row.getIsSelected() && "selected"}
                  >
                    {row.getVisibleCells().map((cell) => (
                      <TableCell key={cell.id}>
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell
                    colSpan={columns.length}
                    className="h-24 text-center"
                  >
                    No reports found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>

        <div className="flex items-center justify-end p-4 space-x-2 border-t">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Next
          </Button>
        </div>
      </div>
    </div>
  )
}